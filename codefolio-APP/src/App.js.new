import { useEffect, useState, useRef } from 'react';
import './App.css';

function App() {
  const [currentTitleIndex, setCurrentTitleIndex] = useState(0);
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const cursorDotRef = useRef(null);
  const cursorOutlineRef = useRef(null);
  const headerRef = useRef(null);
  const navLinksRef = useRef(null);
  const mobileMenuRef = useRef(null);
  const backToTopRef = useRef(null);
  const [statsAnimated, setStatsAnimated] = useState(false);

  const titles = ["Full-Stack Developer", "AI Enthusiast", "Problem Solver", "Tech Innovator"];

  // Handle loading screen
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);
    return () => clearTimeout(timer);
  }, []);

  // Typewriter effect
  useEffect(() => {
    const type = () => {
      const element = document.querySelector('.hero-subtitle');
      if (!element) return;

      const currentTitle = titles[currentTitleIndex];

      if (isDeleting) {
        element.textContent = currentTitle.substring(0, currentCharIndex - 1);
        setCurrentCharIndex(prev => prev - 1);
      } else {
        element.textContent = currentTitle.substring(0, currentCharIndex + 1);
        setCurrentCharIndex(prev => prev + 1);
      }

      if (!isDeleting && currentCharIndex === currentTitle.length) {
        setIsDeleting(true);
        setTimeout(type, 2000);
      } else if (isDeleting && currentCharIndex === 0) {
        setIsDeleting(false);
        setCurrentTitleIndex((prev) => (prev + 1) % titles.length);
        setTimeout(type, 500);
      } else {
        setTimeout(type, isDeleting ? 50 : 100);
      }
    };

    type();
  }, [currentCharIndex, isDeleting, currentTitleIndex, titles]);

  // Scroll & header effects
  useEffect(() => {
    const handleScroll = () => {
      const header = headerRef.current;
      const backToTop = backToTopRef.current;

      if (!header || !backToTop) return;

      if (window.scrollY > 100) header.classList.add('header-scrolled');
      else header.classList.remove('header-scrolled');

      if (window.scrollY > 500) backToTop.classList.add('visible');
      else backToTop.classList.remove('visible');
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Cursor effects
  useEffect(() => {
    const handleMouseMove = (e) => {
      if (cursorDotRef.current && cursorOutlineRef.current) {
        cursorDotRef.current.style.left = `${e.clientX}px`;
        cursorDotRef.current.style.top = `${e.clientY}px`;
        cursorOutlineRef.current.style.left = `${e.clientX}px`;
        cursorOutlineRef.current.style.top = `${e.clientY}px`;
      }
    };
    document.addEventListener('mousemove', handleMouseMove);
    return () => document.removeEventListener('mousemove', handleMouseMove);
  }, []);

  // Mobile menu toggle
  const toggleMobileMenu = () => {
    if (navLinksRef.current && mobileMenuRef.current) {
      navLinksRef.current.classList.toggle('active');
      mobileMenuRef.current.classList.toggle('active');
    }
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <div className="App">
      {isLoading ? (
        <div className="loading-screen">
          <div className="loading-animation">
            <div className="loading-ring"></div>
            <p>Loading Portfolio...</p>
          </div>
        </div>
      ) : (
        <>
          <div className="cursor-dot" ref={cursorDotRef}></div>
          <div className="cursor-outline" ref={cursorOutlineRef}></div>
          
          <header ref={headerRef} className="header">
            <nav>
              <div className="logo">
                <span className="logo-text">Morgan Taylor</span>
                <span className="logo-dot"></span>
              </div>
              <ul className="nav-links" ref={navLinksRef}>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#skills">Skills</a></li>
                <li><a href="#projects">Projects</a></li>
                <li><a href="#contact">Contact</a></li>
              </ul>
              <div className="mobile-menu" ref={mobileMenuRef} onClick={toggleMobileMenu}>
                <span></span>
                <span></span>
                <span></span>
              </div>
            </nav>
          </header>

          <main>
            <section id="home" className="hero">
              <div className="hero-content">
                <div className="hero-text">
                  <h1 className="hero-title">
                    <span className="title-line">Hi, I'm <span className="highlight">Morgan Taylor</span></span>
                  </h1>
                  <h2 className="hero-subtitle"></h2>
                  <p className="hero-description">
                    Computer Science student passionate about creating innovative web solutions using MERN stack, 
                    AI applications for climate change, healthcare, and agriculture. I love building interactive 
                    experiences with modern animations and cutting-edge technology.
                  </p>
                  <div className="cta-buttons">
                    <button className="cta-button primary" onClick={() => document.getElementById('projects').scrollIntoView({ behavior: 'smooth' })}>
                      View My Work
                    </button>
                    <button className="cta-button secondary" onClick={() => document.getElementById('contact').scrollIntoView({ behavior: 'smooth' })}>
                      Get In Touch
                    </button>
                  </div>
                </div>
                <div className="hero-visual">
                  <div className="floating-shapes">
                    <div className="shape shape-1"></div>
                    <div className="shape shape-2"></div>
                    <div className="shape shape-3"></div>
                  </div>
                </div>
              </div>
              <div className="scroll-indicator">
                <span>Scroll to explore</span>
                <div className="scroll-arrow"></div>
              </div>
            </section>
          </main>

          <button className="back-to-top" ref={backToTopRef} onClick={scrollToTop}>
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 15L12 9L6 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
        </>
      )}
    </div>
  );
}

export default App;